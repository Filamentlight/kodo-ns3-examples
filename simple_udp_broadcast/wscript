#! /usr/bin/env python
# encoding: utf-8

# Example of how to run Waf if you want it to download all dependencies
#
# ./waf configure --bundle=ALL --bundle-path=/home/edwin/bundle_dependencies
#                 --ns3-path=/home/edwin/blabla --ns3-type=debug
#

import os
import ntpath

APPNAME = 'simple_udp_broadcast'
VERSION = '1.0.0'

ns3_lib_name = "ns3-dev-%s-%s"
""" The name of a ns3 shared library """

def options(opt):

    opt.load('compiler_cxx')

    opt.add_option('--ns3-path',
                   help='Install path to ns3',
                   action="store", type="string", default=None,
                   dest='ns3_path')

    opt.add_option('--ns3-type',
                   help='The build type used when building ns3 [debug|release]',
                   action="store", type="string", default='debug',
                   dest='ns3_type')

def configure(conf):

    conf.load('compiler_cxx')

    if not conf.options.ns3_path:
        conf.fatal('Please specify a path to ns3')

    ns3_path = os.path.abspath(os.path.expanduser(conf.options.ns3_path))

    if not os.path.isdir(ns3_path):
        conf.fatal('The specified ns3 path "%s" is not a valid '
                   'directory' % ns3_path)

    ns3_build = os.path.join(ns3_path, 'build')
    if not os.path.isdir(ns3_build):
        conf.fatal('Could not find the ns3 build directory '
                   'in "%s"' % ns3_build)

    ns3_type = conf.options.ns3_type

    if not ns3_type:
        conf.fatal('You must specify the build type')

    ns3_lib_dir = conf.root.find_dir(ns3_build)
    ns3_libs = ns3_lib_dir.ant_glob('*.so')

    if not ns3_libs:
        conf.fatal('Could not find any of the ns-3 shared libraries (.so files) '
                   'are you sure you have succesfully built ns-3')

    def get_libname(l):
        # Get the file name only
        l = ntpath.basename(str(l))

        # Remove the lib prefix
        prefix = 'lib'

        if l.startswith(prefix):
            l = l[len(prefix):]

        # Remove the .so
        l = os.path.splitext(l)[0]

        return l


    ns3_lib_names = [get_libname(l) for l in ns3_libs]

    for l in ns3_lib_names:
        conf.check_cxx(lib = l, libpath=[ns3_lib_dir.abspath()])

    conf.env['NS3_LIBS'] = ns3_lib_names
    conf.env['NS3_BUILD'] = [ns3_build]
    conf.env['NS3_TYPE'] = ns3_type

def build(bld):


    ns3_build = bld.env['NS3_BUILD']
    ns3_libs = bld.env['NS3_LIBS']

    bld.program(source = ['main.cpp'],
                target = 'simple_udp_broadcast',
                libpath = ns3_build,
                rpath = ns3_build,
                includes = ns3_build,
                cxxflags = '--std=c++0x',
                lib = ns3_libs,
                features = 'cxx cxxprogram')



