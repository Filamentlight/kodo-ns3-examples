
import os

top = '.'
out = 'build'


ns3_lib_name = "ns3-dev-%s-%s"
""" The name of a ns3 shared library """

def options(opt):
        opt.load('compiler_cxx')
        opt.add_option('--cwdl',
                   help=('Set the library directory for a program.'),
                   action="store", type="string", default=None,
                   dest='kodo_library')

        opt.add_option('--run',
                   help=('Run a locally built program; argument can be a program name,'
                         ' or a command starting with the program name.'),
                   type="string", default='', dest='run')

	opt.add_option('--ns3-path',
                       help='Install path to ns3',
                       action="store", type="string", default=None,
                       dest='ns3_path')

	opt.add_option('--ns3-type',
                       help='The build type used when building ns3 [debug|release]',
                       action="store", type="string", default='debug',
                       dest='ns3_type')

def configure(conf):
        
	if not conf.options.kodo_library:
            conf.fatal('Please specify a path to kodo library')
        kodo_library = os.path.abspath(os.path.expanduser(conf.options.kodo_library))
        if not os.path.isdir(kodo_library): 
        	conf.fatal('The specified path "%s" is not a valid directory' % kodo_library)
        
	kodo_fifi_path= os.path.join(kodo_library, 'bundle_dependencies/fifi-1.0.1')
	if not os.path.isdir(kodo_fifi_path): 
		conf.fatal('Could not find the kodo fifi path directory in "%s"' % kodo_fifi_path)    
        
	kodo_test= os.path.join(kodo_library, 'build/linux/test')
        if not os.path.isdir(kodo_test): 
		conf.fatal('Could not find the kodo test directory in "%s"' % kodo_test)       
	
	kodo_bundle= os.path.join(kodo_library, 'build/linux/bundle_dependencies')
        if not os.path.isdir(kodo_bundle): 
		conf.fatal('Could not find the kodo bundle directory in "%s"' % kodo_bundle) 
      
        kodo_sak= os.path.join(kodo_bundle, 'sak-1.0.0/test')
        if not os.path.isdir(kodo_sak): 
		conf.fatal('Could not find the kodo sak directory in "%s"' % kodo_sak) 
	
	kodo_fifi= os.path.join(kodo_bundle, 'fifi-1.0.1/test')
        if not os.path.isdir(kodo_fifi): 
		conf.fatal('Could not find the kodo fifi directory in "%s"' % kodo_fifi) 

	if not conf.options.ns3_path:
            conf.fatal('Please specify a path to ns3')

	ns3_path = os.path.abspath(os.path.expanduser(conf.options.ns3_path))
	
	if not os.path.isdir(ns3_path): 
        	conf.fatal('The specified ns3 path "%s" is not a valid directory' % ns3_path)

	ns3_build = os.path.join(ns3_path, 'build')
        
        if not os.path.isdir(ns3_build): 
		conf.fatal('Could not find the ns3 build directory in "%s"' % ns3_build)

	ns3_type = conf.options.ns3_type
	
	if not ns3_type:
		conf.fatal('You must specify the build type')

        conf.load('compiler_cxx')       
        conf.check_cxx(header_name = 'fifi/field_types.h', includes = [kodo_fifi_path])
        conf.check_cxx(header_name = 'fifi/field_types.h', includes = [kodo_fifi_path])
	conf.env['NS3_BUILD'] = [ns3_build]
        conf.env['KODO_LIBRARY'] = [kodo_fifi_path]
        conf.env['KODO_TEST'] = [kodo_test]
 	conf.env['KODO_SAK'] = [kodo_sak]
	conf.env['KODO_FIFI'] = [kodo_fifi]
	conf.env['NS3_TYPE'] = ns3_type

def build(bld):

    ns3_build = bld.env['NS3_BUILD'] 
    kodo_fifi_path = bld.env['KODO_LIBRARY']
    kodo_test = bld.env['KODO_TEST'] 
    kodo_sak = bld.env['KODO_SAK']
    kodo_fifi = bld.env['KODO_FIFI']
    ns3_type = bld.env['NS3_TYPE'] 
    
    ns3_lib_dir = bld.root.find_dir(ns3_build)
    ns3_libs = ns3_lib_dir.ant_glob('*.so')
    
     
    ns3_libs = [str(lib).split('/')[-1] for lib in ns3_libs]
    ns3_libs = [lib[3:] for lib in ns3_libs]
    ns3_libs = [lib[:-3] for lib in ns3_libs]
    
    libs = ns3_libs
    print libs
    
    bld.env['INCLUDES'] += ['/home/edwin/kodo/', '/home/edwin/kodo/build/linux/test', '/home/edwin/kodo/bundle_dependencies/fifi-1.0.1', '/home/edwin/kodo/kodo/rlnc/','/home/edwin/kodo/bundle_dependencies/boost-1.1.0-boost_1_48_0/boost', '/home/edwin/kodo/bundle_dependencies/sak-1.0.0', '/home/edwin/waf_examples/test-ns3.5/test-ns3.4/', '/home/edwin/repo/ns-3-allinone/ns-3-dev/build/']
  
    bld.program(source = ['adhoc_1.cc', 'pep-wifi-net-device_1.cc', 'code-header.cc'],
                target = 'adhoc_1',
                libpath = bld.env['INCLUDES'],
                lib = libs, 
                cxxflags = '-g',
                features = 'cxx cxxprogram')
                
                


